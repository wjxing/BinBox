#! /bin/bash

#Err Macro
ERR_EXIST_DIR=2
ERR_NOT_EXIST=12

# Color used in echo
## Text--forground
Echo_Black_Text=`tput setaf 0`
Echo_Red_Text=`tput setaf 1`
Echo_Green_Text=`tput setaf 2`
Echo_Yellow_Text=`tput setaf 3`
Echo_Blue_Text=`tput setaf 4`
Echo_Magenta_Text=`tput setaf 5`
Echo_Cyan_Text=`tput setaf 6`
Echo_White_Text=`tput setaf 7`
Echo_Color_Reset=`tput sgr0`
## background color
Echo_Black_BG=`tput setab 0`
Echo_Red_BG=`tput setab 1`
Echo_Green_BG=`tput setab 2`
Echo_Yellow_BG=`tput setab 3`
Echo_Blue_BG=`tput setab 4`
Echo_Magenta_BG=`tput setab 5`
Echo_Cyan_BG=`tput setab 6`
Echo_White_BG=`tput setab 7`
Echo_Color_Reset=`tput sgr0`

Gen_Tmp="Gen_Tmp"
HeadFileList_All="${Gen_Tmp}"/"HF_All.txt"
HF_NoHost="${Gen_Tmp}"/"HF_NoHost.txt"
HF_NoHost_ND="${Gen_Tmp}"/"HF_NoHost_ND.txt"
HF_AbPath="${Gen_Tmp}"/"HF_AbosultePath.txt"
HF_AbsPath_ND="${Gen_Tmp}"/"HF_AbosultePath_ND.txt"
HF_RelPath="${Gen_Tmp}"/"HF_RelPath.txt"
HF_RelPath_ND="${Gen_Tmp}"/"HF_RelPath_ND.txt"
NotFound="${Gen_Tmp}"/"NotFound.txt"
Valid_HF="${Gen_Tmp}"/"Valid_HF.txt"
Valid_SRC="${Gen_Tmp}"/"Valid_SRC.txt"
Valid_FILES="${Gen_Tmp}"/"Valid_FILES.list"

print_help()
{
    echo "Usage: "
    ##           $0                               $1
    ##                                            dir_to_be_count
    echo "       ${Echo_Green_Text}`basename $0`  <Directory to be count>${Echo_Color_Reset}"
    echo "       `basename $0` --help/-h"
    echo
    echo "For example:"
    echo -e " \t `basename $0` kernel-ZZZ"
    echo -e " \t    this would count the valid source code line number of kernel source in kernel-ZZZ, the result would output to ${Valid_FILES}"
    echo
}

if [ $1 = "-h" -o $1 = "--help" ]; then
    print_help
    exit 0
fi

DIR_TO_BE_COUNT=$1
cd "${DIR_TO_BE_COUNT}"  >/dev/null
REALPATH_DIR_TO_BE_COUNT="${PWD}"
cd - >/dev/null
REALPATH_DIR_TO_BE_COUNT="${REALPATH_DIR_TO_BE_COUNT}""/"

if [ -d "${Gen_Tmp}" ] ; then
    echo "${Gen_Tmp} already existed"
    rm -rf ${NotFound}
else
    mkdir "${Gen_Tmp}"
fi

echo -e "${Echo_Yellow_BG}"
echo -e "${Echo_Color_Reset}"
yes '-' | head -n$(tput cols) | tr -d '\n'
echo

## Check the source code directory whether is exist
if [ ! -d "${DIR_TO_BE_COUNT}" ]; then # Not found
    echo "${Echo_Red_Text}Direcotry $DIR_TO_BE_COUNT NOT exist${Echo_Color_Reset}"
    exit ${ERR_NOT_EXIST}
fi

KERNEL_VALID_HEADER_FILES=

# Get kernel version
VER=`head -n 3 ${DIR_TO_BE_COUNT}/source/Makefile | awk -F'=' '{print $2}'`
KERN_VERSION=`echo ${VER} | awk '{print $1}'`
KERN_PATCHLEVEL=`echo ${VER} | awk '{print $2}'`
KERN_SUBLEVEL=`echo ${VER} | awk '{print $3}'`

#echo VER=${VER}
#echo VERSION=[${KERN_VERSION}], KERN_PATCHLEVEL=[${KERN_PATCHLEVEL}], KERN_SUBLEVEL=[${KERN_SUBLEVEL}]
# the source file used to be compiled (.S .s .c)
KERNEL_VALID_SRC_FILES=

KERNEL_VALID_SRC_FILES=`find "${DIR_TO_BE_COUNT}" ! -path "./tools/*"  ! -path "./examples/*" \
    ! -path \*/.built-in.o.cmd -name '.*.o.cmd' -print0 |  xargs -0 egrep ":=[[:space:]]+/[[:alnum:]]+" \
    | grep -v '\-gcc' | grep -v  '\-ld' | grep -v ' := gcc' | grep -v ' := g++' | grep -v '\-objcopy' \
    | awk -F':=' '{print $2}' | grep -v 'scripts' | grep -v 'tools'`

if [ -z "${KERNEL_VALID_SRC_FILES}" ] ; then
    echo "${Echo_Red_Text}Old kernel found! kernel version=[${KERN_VERSION}.${KERN_PATCHLEVEL}.${KERN_SUBLEVEL}]${Echo_Color_Reset}"
    KERNEL_VALID_SRC_FILES=`find "${DIR_TO_BE_COUNT}" ! -path "./tools/*"  ! -path "./examples/*" \
        ! -path \*/.built-in.o.cmd -name '.*.o.cmd' -print0 | xargs -0 egrep ":=[[:space:]]+[[:alnum:]]+" \
        |  awk '{print $NF}' | sed '/^.*.o$/d' | sed '/--end-group/d'`
fi

#######################################################################
# .S .c .s source file list
#######################################################################

## copy the valid files
# file not found in dir_to_be_count
File_Not_Exist=
Index=0
for files in `echo "${KERNEL_VALID_SRC_FILES}" | sed -e 's/\ /\n/g'`; do
    DIR_OF_FILES=`dirname "${files}"`
    if [ ! -e "${files}" ]; then
        File_Not_Exist+="${files}"
        File_Not_Exist+=" "
        echo "File not found: ${Echo_Red_Text}"${files}" ${Echo_Color_Reset}"
        continue
    fi
    echo "${files}" >> "${Valid_SRC}"
    ((Index++))
    echo -e -n "\rSource file[.c .S .s] Index:\t"
    echo -e -n "[${Echo_Cyan_Text}${Index}${Echo_Color_Reset}]"
done

if [ -n "${File_Not_Exist}" ]; then
    echo "${File_Not_Exist}" | sed -e 's/\ /\n/g'
fi

sort -u ${Valid_SRC} -o ${Valid_SRC}

#######################################################################
# .h header file copy
#######################################################################
# Find all the header files, include the host PCs, which is start with /usr
find "${DIR_TO_BE_COUNT}" ! -path "./tools/*" ! -path "./examples/*" ! -path "./scripts/*" ! -path \*/.built-in.o.cmd \
    -name .*.o.cmd  -print0 | xargs -0 grep '\.h' | awk '{for(i=2;i<=NF;i++){printf "%s ", $i}; printf "\n"}' \
    | grep -v ':=' | grep -v 'scripts' | grep -v 'tools' | grep -v 'toolchains' \
    | sed -e 's/\$.*include/include/g' -e 's/\.h.*$/\.h/g' > "${HeadFileList_All}"

sort -u ${HeadFileList_All} -o ${HeadFileList_All}

# Exclude the hostPCs header file. remain the toolchain libc header, linux kernel headerfiles
grep -v '^\/usr' "${HeadFileList_All}" > "${HF_NoHost}"
awk '!seen[$0]++'  "${HF_NoHost}" > "${HF_NoHost_ND}"

## Type 1: absolutely path
# Sort the header files with absolutely path. Contain the toolchain libc header files, linux kenrel header files
grep '^\/' "${HF_NoHost_ND}" > "${HF_AbPath}"
awk '!seen[$0]++'  "${HF_AbPath}" > "${HF_AbsPath_ND}"
## Type 2: relative path
# Sort the header files with relative path, only the linux kernel header files
grep -v '^\/' "${HF_NoHost}" > "${HF_RelPath}"
awk '!seen[$0]++'  "${HF_RelPath}" > "${HF_RelPath_ND}"

## Handle the Type 2: relative path
File_Not_Exist=
Index=0
KERNEL_VALID_HEADER_FILES=
KERNEL_VALID_HEADER_FILES=`cat "${HF_RelPath_ND}"`
echo; yes '-' | head -n$(tput cols) | tr -d '\n'
echo "Header file list in relative path mode"
for files in `echo "${KERNEL_VALID_HEADER_FILES}" | sed -e 's/\ /\n/g'`; do
    DIR_OF_FILES=`dirname "${files}"`
    if [ ! -e "${DIR_TO_BE_COUNT}"/"${files}" ]; then
        File_Not_Exist+="${DIR_TO_BE_COUNT}"/"${files}"
        File_Not_Exist+=" "
        continue
    fi
    echo "${files}" >> "${Valid_HF}"
    ((Index++))
    echo -e -n "\rHeader file[.h] Index:\t"
    echo -e -n "\t[${Echo_Cyan_Text}${Index}${Echo_Color_Reset}]"
done

if [ -n "${File_Not_Exist}" ]; then
    #echo "${Echo_Red_Text}Some files not found, please check:${Echo_Color_Reset}"
    echo "${File_Not_Exist}" | sed -e 's/\ /\n/g'  >> "${NotFound}"
fi
## Handle the Type 1: absolutely path
File_Not_Exist=
DIR_OF_FILES=
KERNEL_VALID_HEADER_FILES=
KERNEL_VALID_HEADER_FILES=`cat "${HF_AbsPath_ND}"`

## For some dir is symbol link
cd "${DIR_TO_BE_COUNT}" && PATH_OF_CODE_DIR=`echo "${PWD}"` && cd - > /dev/null
#echo PATH_OF_CODE_DIR is "${PATH_OF_CODE_DIR}"

echo
yes '-' | head -n$(tput cols) | tr -d '\n'
echo "Header file list in absolutely path mode"
for files in `echo "${KERNEL_VALID_HEADER_FILES}" | sed -e 's/\ /\n/g'`; do
    if [ ! -e "${files}" ]; then
        File_Not_Exist+="${files}"
        File_Not_Exist+=" "
        #echo "File not found: ${Echo_Red_Text}"${DIR_TO_BE_COUNT}"/"${files}" ${Echo_Color_Reset}"
        continue
    fi
    echo "${files}" >> "${Valid_HF}"
    ((Index++))
    echo -e -n "\rHeader file[.h] Index:\t"
    echo -e -n "\t[${Echo_Cyan_Text}${Index}${Echo_Color_Reset}]"
    continue
done

if [ -n "${File_Not_Exist}" ]; then
    echo "${Echo_Red_Text}Some files not found, please check:${Echo_Color_Reset}"
    echo "${File_Not_Exist}" | sed -e 's/\ /\n/g'  >> "${NotFound}"
fi

if [ -e "${Valid_SRC}" -a -e "${Valid_HF}" ] ; then
    cat "${Valid_SRC}" "${Valid_HF}" > ${Valid_FILES}
fi
sed "s@^\([^/]\)@${REALPATH_DIR_TO_BE_COUNT}\1@" -i ${Valid_FILES}

echo
for files in `cat ${Valid_FILES}`; do
    if [ ! -e "${files}" ] ; then
        NotFoundFileName=`echo "${files}" | sed 's/^.*\///'`
        sed 's@${files}@@' -i ${Valid_FILES}
        SearchMissFile=`find "${REALPATH_DIR_TO_BE_COUNT}" -name "${NotFoundFileName}"`
        if [ -n "${SearchMissFile}" ] ; then
            echo "${SearchMissFile}" >> ${Valid_FILES}
        else
            ## exclude the libc header files
            if [ "stdarg.h" != "${NotFoundFileName}"  ] ; then
                echo "Not found file: ${files}"
            fi
        fi
    fi
done

sync

echo -e "${Echo_Yellow_BG}"
echo -e "${Echo_Color_Reset}"
yes '-' | head -n$(tput cols) | tr -d '\n'

exit 0

